// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'error.freezed.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `EncodeError`, `SplitError`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `from`, `from`, `from`, `from`, `from`, `from`

@freezed
sealed class ContinuousJoinError
    with _$ContinuousJoinError
    implements FrbException {
  const ContinuousJoinError._();

  const factory ContinuousJoinError.headerParseError(HeaderParseError field0) =
      ContinuousJoinError_HeaderParseError;
  const factory ContinuousJoinError.joinError(JoinError field0) =
      ContinuousJoinError_JoinError;
  const factory ContinuousJoinError.decodeError(DecodeError field0) =
      ContinuousJoinError_DecodeError;
}

@freezed
sealed class DecodeError with _$DecodeError {
  const DecodeError._();

  /// Unable to decode hex part
  const factory DecodeError.unableToDecodeHex(BigInt field0, String field1) =
      DecodeError_UnableToDecodeHex;

  /// Unable to decode base32 part
  const factory DecodeError.unableToDecodeBase32(BigInt field0, String field1) =
      DecodeError_UnableToDecodeBase32;

  /// Unable to decompress zlib data
  const factory DecodeError.unableToInflateZlib(String field0) =
      DecodeError_UnableToInflateZlib;
}

@freezed
sealed class HeaderParseError with _$HeaderParseError {
  const HeaderParseError._();

  /// No data found
  const factory HeaderParseError.empty() = HeaderParseError_Empty;

  /// Invalid encoding
  const factory HeaderParseError.invalidEncoding(String field0) =
      HeaderParseError_InvalidEncoding;

  /// Invalid file type
  const factory HeaderParseError.invalidFileType(String field0) =
      HeaderParseError_InvalidFileType;

  /// Invalid fixed header
  const factory HeaderParseError.invalidFixedHeader() =
      HeaderParseError_InvalidFixedHeader;

  /// Invalid header size, not long enough
  const factory HeaderParseError.invalidHeaderSize(BigInt field0) =
      HeaderParseError_InvalidHeaderSize;

  /// Invalid header parts, not enough parts
  const factory HeaderParseError.invalidHeaderParts(String field0) =
      HeaderParseError_InvalidHeaderParts;
}

@freezed
sealed class JoinError with _$JoinError {
  const JoinError._();

  /// No data found
  const factory JoinError.empty() = JoinError_Empty;

  /// Conflicting/variable file type/encodings/sizes
  const factory JoinError.conflictingHeaders() = JoinError_ConflictingHeaders;

  /// Too many parts
  const factory JoinError.tooManyParts(BigInt field0, BigInt field1) =
      JoinError_TooManyParts;

  /// Duplicate part with different content
  const factory JoinError.duplicatePartWrongContent(BigInt field0) =
      JoinError_DuplicatePartWrongContent;

  /// Part with no data
  const factory JoinError.partWithNoData(BigInt field0) =
      JoinError_PartWithNoData;

  /// Missing part
  const factory JoinError.missingPart(BigInt field0) = JoinError_MissingPart;

  /// Header parse error
  const factory JoinError.headerParseError(HeaderParseError field0) =
      JoinError_HeaderParseError;

  /// Decode error
  const factory JoinError.decodeError(DecodeError field0) =
      JoinError_DecodeError;
}
