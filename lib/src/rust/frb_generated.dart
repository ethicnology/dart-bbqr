// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'third_party/bbqr/continuous_join.dart';
import 'third_party/bbqr/encode.dart';
import 'third_party/bbqr/file_type.dart';
import 'third_party/bbqr/join.dart';
import 'third_party/bbqr/qr.dart';
import 'third_party/bbqr/split.dart';

/// Main entrypoint of the Rust API
class LibBbqr extends BaseEntrypoint<LibBbqrApi, LibBbqrApiImpl, LibBbqrWire> {
  @internal
  static final instance = LibBbqr._();

  LibBbqr._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    LibBbqrApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required LibBbqrApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<LibBbqrApiImpl, LibBbqrWire> get apiImplConstructor =>
      LibBbqrApiImpl.new;

  @override
  WireConstructor<LibBbqrWire> get wireConstructor =>
      LibBbqrWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1507498341;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'bbqr_bindings',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class LibBbqrApi extends BaseApi {
  Future<ContinuousJoinResult> bbqrContinuousJoinContinuousJoinerAddPart({
    required ContinuousJoiner that,
    required String part_,
  });

  Future<ContinuousJoiner> bbqrContinuousJoinContinuousJoinerDefault();

  Future<ContinuousJoiner> bbqrContinuousJoinContinuousJoinerNew();

  Future<int> bbqrEncodeEncodingAsByte({required Encoding that});

  Future<Encoding?> bbqrEncodeEncodingFromByte({required int byte});

  Future<bool> bbqrEncodeEncodingIsKnownEncoding({required int byte});

  Future<BigInt> bbqrEncodeEncodingSplitMod({required Encoding that});

  Future<int> bbqrFileTypeFileTypeAsByte({required FileType that});

  Future<FileType?> bbqrFileTypeFileTypeFromByte({required int byte});

  Future<bool> bbqrFileTypeFileTypeIsKnownFiletype({required int byte});

  Future<Joined> bbqrJoinJoinedTryFromParts({required List<String> parts});

  Future<SplitOptions> bbqrSplitSplitOptionsDefault();

  Future<Split> bbqrSplitSplitTryFromData({
    required List<int> bytes,
    required FileType fileType,
    required SplitOptions options,
  });

  Future<BigInt> bbqrQrVersionDataCapacity({required Version that});

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ContinuousJoinError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ContinuousJoinError;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ContinuousJoinErrorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ContinuousJoinResult;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ContinuousJoinResult;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ContinuousJoinResultPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ContinuousJoiner;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ContinuousJoiner;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ContinuousJoinerPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_JoinError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_JoinError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_JoinErrorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SplitError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SplitError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SplitErrorPtr;
}

class LibBbqrApiImpl extends LibBbqrApiImplPlatform implements LibBbqrApi {
  LibBbqrApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<ContinuousJoinResult> bbqrContinuousJoinContinuousJoinerAddPart({
    required ContinuousJoiner that,
    required String part_,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner(
            that,
            serializer,
          );
          sse_encode_String(part_, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinResult,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinError,
        ),
        constMeta: kBbqrContinuousJoinContinuousJoinerAddPartConstMeta,
        argValues: [that, part_],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrContinuousJoinContinuousJoinerAddPartConstMeta =>
      const TaskConstMeta(
        debugName: "ContinuousJoiner_add_part",
        argNames: ["that", "part_"],
      );

  @override
  Future<ContinuousJoiner> bbqrContinuousJoinContinuousJoinerDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner,
          decodeErrorData: null,
        ),
        constMeta: kBbqrContinuousJoinContinuousJoinerDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrContinuousJoinContinuousJoinerDefaultConstMeta =>
      const TaskConstMeta(debugName: "ContinuousJoiner_default", argNames: []);

  @override
  Future<ContinuousJoiner> bbqrContinuousJoinContinuousJoinerNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner,
          decodeErrorData: null,
        ),
        constMeta: kBbqrContinuousJoinContinuousJoinerNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrContinuousJoinContinuousJoinerNewConstMeta =>
      const TaskConstMeta(debugName: "ContinuousJoiner_new", argNames: []);

  @override
  Future<int> bbqrEncodeEncodingAsByte({required Encoding that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_encoding(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_8,
          decodeErrorData: null,
        ),
        constMeta: kBbqrEncodeEncodingAsByteConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrEncodeEncodingAsByteConstMeta =>
      const TaskConstMeta(debugName: "encoding_as_byte", argNames: ["that"]);

  @override
  Future<Encoding?> bbqrEncodeEncodingFromByte({required int byte}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_8(byte, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_encoding,
          decodeErrorData: null,
        ),
        constMeta: kBbqrEncodeEncodingFromByteConstMeta,
        argValues: [byte],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrEncodeEncodingFromByteConstMeta =>
      const TaskConstMeta(debugName: "encoding_from_byte", argNames: ["byte"]);

  @override
  Future<bool> bbqrEncodeEncodingIsKnownEncoding({required int byte}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_8(byte, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kBbqrEncodeEncodingIsKnownEncodingConstMeta,
        argValues: [byte],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrEncodeEncodingIsKnownEncodingConstMeta =>
      const TaskConstMeta(
        debugName: "encoding_is_known_encoding",
        argNames: ["byte"],
      );

  @override
  Future<BigInt> bbqrEncodeEncodingSplitMod({required Encoding that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_encoding(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_usize,
          decodeErrorData: null,
        ),
        constMeta: kBbqrEncodeEncodingSplitModConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrEncodeEncodingSplitModConstMeta =>
      const TaskConstMeta(debugName: "encoding_split_mod", argNames: ["that"]);

  @override
  Future<int> bbqrFileTypeFileTypeAsByte({required FileType that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_file_type(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_8,
          decodeErrorData: null,
        ),
        constMeta: kBbqrFileTypeFileTypeAsByteConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrFileTypeFileTypeAsByteConstMeta =>
      const TaskConstMeta(debugName: "file_type_as_byte", argNames: ["that"]);

  @override
  Future<FileType?> bbqrFileTypeFileTypeFromByte({required int byte}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_8(byte, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_file_type,
          decodeErrorData: null,
        ),
        constMeta: kBbqrFileTypeFileTypeFromByteConstMeta,
        argValues: [byte],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrFileTypeFileTypeFromByteConstMeta =>
      const TaskConstMeta(debugName: "file_type_from_byte", argNames: ["byte"]);

  @override
  Future<bool> bbqrFileTypeFileTypeIsKnownFiletype({required int byte}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_8(byte, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kBbqrFileTypeFileTypeIsKnownFiletypeConstMeta,
        argValues: [byte],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrFileTypeFileTypeIsKnownFiletypeConstMeta =>
      const TaskConstMeta(
        debugName: "file_type_is_known_filetype",
        argNames: ["byte"],
      );

  @override
  Future<Joined> bbqrJoinJoinedTryFromParts({required List<String> parts}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_String(parts, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_joined,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinError,
        ),
        constMeta: kBbqrJoinJoinedTryFromPartsConstMeta,
        argValues: [parts],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrJoinJoinedTryFromPartsConstMeta => const TaskConstMeta(
    debugName: "joined_try_from_parts",
    argNames: ["parts"],
  );

  @override
  Future<SplitOptions> bbqrSplitSplitOptionsDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_split_options,
          decodeErrorData: null,
        ),
        constMeta: kBbqrSplitSplitOptionsDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrSplitSplitOptionsDefaultConstMeta =>
      const TaskConstMeta(debugName: "split_options_default", argNames: []);

  @override
  Future<Split> bbqrSplitSplitTryFromData({
    required List<int> bytes,
    required FileType fileType,
    required SplitOptions options,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_list_prim_u_8_loose(bytes, serializer);
          sse_encode_file_type(fileType, serializer);
          sse_encode_box_autoadd_split_options(options, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_split,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSplitError,
        ),
        constMeta: kBbqrSplitSplitTryFromDataConstMeta,
        argValues: [bytes, fileType, options],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrSplitSplitTryFromDataConstMeta => const TaskConstMeta(
    debugName: "split_try_from_data",
    argNames: ["bytes", "fileType", "options"],
  );

  @override
  Future<BigInt> bbqrQrVersionDataCapacity({required Version that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_version(that, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_usize,
          decodeErrorData: null,
        ),
        constMeta: kBbqrQrVersionDataCapacityConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kBbqrQrVersionDataCapacityConstMeta => const TaskConstMeta(
    debugName: "version_data_capacity",
    argNames: ["that"],
  );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ContinuousJoinError =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ContinuousJoinError =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinError;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ContinuousJoinResult =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinResult;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ContinuousJoinResult =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinResult;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ContinuousJoiner =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ContinuousJoiner =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_JoinError =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_JoinError =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinError;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SplitError =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSplitError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SplitError =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSplitError;

  @protected
  ContinuousJoinError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContinuousJoinErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContinuousJoinResult
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinResult(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContinuousJoinResultImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContinuousJoiner
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContinuousJoinerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SplitError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSplitError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SplitErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContinuousJoiner
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContinuousJoinerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContinuousJoinError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContinuousJoinErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContinuousJoinResult
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinResult(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContinuousJoinResultImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ContinuousJoiner
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ContinuousJoinerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  JoinError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JoinErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SplitError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSplitError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SplitErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  Encoding dco_decode_box_autoadd_encoding(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_encoding(raw);
  }

  @protected
  FileType dco_decode_box_autoadd_file_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_file_type(raw);
  }

  @protected
  SplitOptions dco_decode_box_autoadd_split_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_split_options(raw);
  }

  @protected
  Encoding dco_decode_encoding(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Encoding.values[raw as int];
  }

  @protected
  FileType dco_decode_file_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FileType.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Joined dco_decode_joined(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Joined(
      encoding: dco_decode_encoding(arr[0]),
      fileType: dco_decode_file_type(arr[1]),
      data: dco_decode_list_prim_u_8_strict(arr[2]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  Encoding? dco_decode_opt_box_autoadd_encoding(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_encoding(raw);
  }

  @protected
  FileType? dco_decode_opt_box_autoadd_file_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_file_type(raw);
  }

  @protected
  Split dco_decode_split(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return Split(
      version: dco_decode_version(arr[0]),
      parts: dco_decode_list_String(arr[1]),
      encoding: dco_decode_encoding(arr[2]),
    );
  }

  @protected
  SplitOptions dco_decode_split_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return SplitOptions(
      encoding: dco_decode_encoding(arr[0]),
      minSplitNumber: dco_decode_usize(arr[1]),
      maxSplitNumber: dco_decode_usize(arr[2]),
      minVersion: dco_decode_version(arr[3]),
      maxVersion: dco_decode_version(arr[4]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Version dco_decode_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Version.values[raw as int];
  }

  @protected
  ContinuousJoinError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContinuousJoinErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ContinuousJoinResult
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinResult(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContinuousJoinResultImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ContinuousJoiner
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContinuousJoinerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JoinError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SplitError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSplitError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SplitErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ContinuousJoiner
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContinuousJoinerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ContinuousJoinError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContinuousJoinErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ContinuousJoinResult
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinResult(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContinuousJoinResultImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ContinuousJoiner
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ContinuousJoinerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  JoinError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return JoinErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SplitError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSplitError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SplitErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  Encoding sse_decode_box_autoadd_encoding(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_encoding(deserializer));
  }

  @protected
  FileType sse_decode_box_autoadd_file_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_file_type(deserializer));
  }

  @protected
  SplitOptions sse_decode_box_autoadd_split_options(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_split_options(deserializer));
  }

  @protected
  Encoding sse_decode_encoding(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Encoding.values[inner];
  }

  @protected
  FileType sse_decode_file_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FileType.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Joined sse_decode_joined(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_encoding = sse_decode_encoding(deserializer);
    var var_fileType = sse_decode_file_type(deserializer);
    var var_data = sse_decode_list_prim_u_8_strict(deserializer);
    return Joined(
      encoding: var_encoding,
      fileType: var_fileType,
      data: var_data,
    );
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Encoding? sse_decode_opt_box_autoadd_encoding(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_encoding(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FileType? sse_decode_opt_box_autoadd_file_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_file_type(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Split sse_decode_split(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_version = sse_decode_version(deserializer);
    var var_parts = sse_decode_list_String(deserializer);
    var var_encoding = sse_decode_encoding(deserializer);
    return Split(
      version: var_version,
      parts: var_parts,
      encoding: var_encoding,
    );
  }

  @protected
  SplitOptions sse_decode_split_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_encoding = sse_decode_encoding(deserializer);
    var var_minSplitNumber = sse_decode_usize(deserializer);
    var var_maxSplitNumber = sse_decode_usize(deserializer);
    var var_minVersion = sse_decode_version(deserializer);
    var var_maxVersion = sse_decode_version(deserializer);
    return SplitOptions(
      encoding: var_encoding,
      minSplitNumber: var_minSplitNumber,
      maxSplitNumber: var_maxSplitNumber,
      minVersion: var_minVersion,
      maxVersion: var_maxVersion,
    );
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  Version sse_decode_version(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Version.values[inner];
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinError(
    ContinuousJoinError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ContinuousJoinErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinResult(
    ContinuousJoinResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ContinuousJoinResultImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner(
    ContinuousJoiner self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ContinuousJoinerImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinError(
    JoinError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JoinErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSplitError(
    SplitError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SplitErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner(
    ContinuousJoiner self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ContinuousJoinerImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinError(
    ContinuousJoinError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ContinuousJoinErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoinResult(
    ContinuousJoinResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ContinuousJoinResultImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerContinuousJoiner(
    ContinuousJoiner self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ContinuousJoinerImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerJoinError(
    JoinError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as JoinErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSplitError(
    SplitError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SplitErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_encoding(
    Encoding self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_encoding(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_file_type(
    FileType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_file_type(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_split_options(
    SplitOptions self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_split_options(self, serializer);
  }

  @protected
  void sse_encode_encoding(Encoding self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_file_type(FileType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_joined(Joined self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_encoding(self.encoding, serializer);
    sse_encode_file_type(self.fileType, serializer);
    sse_encode_list_prim_u_8_strict(self.data, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_box_autoadd_encoding(
    Encoding? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_encoding(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_file_type(
    FileType? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_file_type(self, serializer);
    }
  }

  @protected
  void sse_encode_split(Split self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_version(self.version, serializer);
    sse_encode_list_String(self.parts, serializer);
    sse_encode_encoding(self.encoding, serializer);
  }

  @protected
  void sse_encode_split_options(SplitOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_encoding(self.encoding, serializer);
    sse_encode_usize(self.minSplitNumber, serializer);
    sse_encode_usize(self.maxSplitNumber, serializer);
    sse_encode_version(self.minVersion, serializer);
    sse_encode_version(self.maxVersion, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_version(Version self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }
}

@sealed
class ContinuousJoinErrorImpl extends RustOpaque
    implements ContinuousJoinError {
  // Not to be used by end users
  ContinuousJoinErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ContinuousJoinErrorImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibBbqr
            .instance
            .api
            .rust_arc_increment_strong_count_ContinuousJoinError,
    rustArcDecrementStrongCount:
        LibBbqr
            .instance
            .api
            .rust_arc_decrement_strong_count_ContinuousJoinError,
    rustArcDecrementStrongCountPtr:
        LibBbqr
            .instance
            .api
            .rust_arc_decrement_strong_count_ContinuousJoinErrorPtr,
  );
}

@sealed
class ContinuousJoinResultImpl extends RustOpaque
    implements ContinuousJoinResult {
  // Not to be used by end users
  ContinuousJoinResultImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ContinuousJoinResultImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibBbqr
            .instance
            .api
            .rust_arc_increment_strong_count_ContinuousJoinResult,
    rustArcDecrementStrongCount:
        LibBbqr
            .instance
            .api
            .rust_arc_decrement_strong_count_ContinuousJoinResult,
    rustArcDecrementStrongCountPtr:
        LibBbqr
            .instance
            .api
            .rust_arc_decrement_strong_count_ContinuousJoinResultPtr,
  );
}

@sealed
class ContinuousJoinerImpl extends RustOpaque implements ContinuousJoiner {
  // Not to be used by end users
  ContinuousJoinerImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ContinuousJoinerImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibBbqr.instance.api.rust_arc_increment_strong_count_ContinuousJoiner,
    rustArcDecrementStrongCount:
        LibBbqr.instance.api.rust_arc_decrement_strong_count_ContinuousJoiner,
    rustArcDecrementStrongCountPtr:
        LibBbqr
            .instance
            .api
            .rust_arc_decrement_strong_count_ContinuousJoinerPtr,
  );

  /// Add a part to the continuous joiner
  Future<ContinuousJoinResult> addPart({required String part_}) => LibBbqr
      .instance
      .api
      .bbqrContinuousJoinContinuousJoinerAddPart(that: this, part_: part_);
}

@sealed
class JoinErrorImpl extends RustOpaque implements JoinError {
  // Not to be used by end users
  JoinErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  JoinErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibBbqr.instance.api.rust_arc_increment_strong_count_JoinError,
    rustArcDecrementStrongCount:
        LibBbqr.instance.api.rust_arc_decrement_strong_count_JoinError,
    rustArcDecrementStrongCountPtr:
        LibBbqr.instance.api.rust_arc_decrement_strong_count_JoinErrorPtr,
  );
}

@sealed
class SplitErrorImpl extends RustOpaque implements SplitError {
  // Not to be used by end users
  SplitErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SplitErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        LibBbqr.instance.api.rust_arc_increment_strong_count_SplitError,
    rustArcDecrementStrongCount:
        LibBbqr.instance.api.rust_arc_decrement_strong_count_SplitError,
    rustArcDecrementStrongCountPtr:
        LibBbqr.instance.api.rust_arc_decrement_strong_count_SplitErrorPtr,
  );
}
