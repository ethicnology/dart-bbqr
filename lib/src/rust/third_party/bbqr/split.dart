// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'encode.dart';
import 'file_type.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'qr.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `source`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SplitError>>
abstract class SplitError implements RustOpaqueInterface {}

/// The split Data structure, includes the version, parts, and encoding
class Split {
  final Version version;
  final List<String> parts;
  final Encoding encoding;

  const Split({
    required this.version,
    required this.parts,
    required this.encoding,
  });

  static Future<Split> tryFromData({
    required List<int> bytes,
    required FileType fileType,
    required SplitOptions options,
  }) => LibBbqr.instance.api.bbqrSplitSplitTryFromData(
    bytes: bytes,
    fileType: fileType,
    options: options,
  );

  @override
  int get hashCode => version.hashCode ^ parts.hashCode ^ encoding.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Split &&
          runtimeType == other.runtimeType &&
          version == other.version &&
          parts == other.parts &&
          encoding == other.encoding;
}

/// Split options, has a default implementation but you can customize it.
///
/// Set the qr version, encoding, and min/max split number
class SplitOptions {
  /// The encoding to use for the splits, defaults to Zlib
  final Encoding encoding;

  /// The minimum number of parts to split to, default: 1
  final BigInt minSplitNumber;

  /// The maximum number of parts to split to, default: 1295
  final BigInt maxSplitNumber;

  /// The minimum QR version to split to, default: V01
  final Version minVersion;

  /// The maximum QR version to split to, default: V40
  final Version maxVersion;

  const SplitOptions({
    required this.encoding,
    required this.minSplitNumber,
    required this.maxSplitNumber,
    required this.minVersion,
    required this.maxVersion,
  });

  static Future<SplitOptions> default_() =>
      LibBbqr.instance.api.bbqrSplitSplitOptionsDefault();

  @override
  int get hashCode =>
      encoding.hashCode ^
      minSplitNumber.hashCode ^
      maxSplitNumber.hashCode ^
      minVersion.hashCode ^
      maxVersion.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SplitOptions &&
          runtimeType == other.runtimeType &&
          encoding == other.encoding &&
          minSplitNumber == other.minSplitNumber &&
          maxSplitNumber == other.maxSplitNumber &&
          minVersion == other.minVersion &&
          maxVersion == other.maxVersion;
}
